Below is a complete SQL script that demonstrates the use of SQL objects such as Tables, Views, Indexes, Sequences, and Synonyms step by step, based on the schema you provided.

### Step 1: Create Tables

```sql
-- Create the Employees Table
CREATE TABLE Employees (
    person_name VARCHAR(50),
    street VARCHAR(100),
    city VARCHAR(50)
);

-- Create the Works Table
CREATE TABLE Works (
    person_name VARCHAR(50),
    company_name VARCHAR(50),
    salary DECIMAL(10, 2)
);

-- Create the Companies Table
CREATE TABLE Companies (
    company_name VARCHAR(50),
    city VARCHAR(50)
);

-- Create the Branches Table
CREATE TABLE Branches (
    branch_name VARCHAR(50),
    branch_city VARCHAR(50),
    assets DECIMAL(15, 2)
);

-- Create the Customers Table
CREATE TABLE Customers (
    customer_name VARCHAR(50),
    customer_street VARCHAR(100),
    customer_city VARCHAR(50)
);

-- Create the Loans Table
CREATE TABLE Loans (
    loan_number INT PRIMARY KEY,
    branch_name VARCHAR(50),
    amount DECIMAL(15, 2)
);

-- Create the Borrowers Table
CREATE TABLE Borrowers (
    customer_name VARCHAR(50),
    loan_number INT,
    FOREIGN KEY (loan_number) REFERENCES Loans(loan_number)
);

-- Create the Accounts Table
CREATE TABLE Accounts (
    account_number INT PRIMARY KEY,
    branch_name VARCHAR(50),
    balance DECIMAL(15, 2)
);

-- Create the Depositors Table
CREATE TABLE Depositors (
    customer_name VARCHAR(50),
    account_number INT,
    FOREIGN KEY (account_number) REFERENCES Accounts(account_number)
);
```

### Step 2: Insert Data into the Tables

```sql
-- Insert data into Employees Table
INSERT INTO Employees (person_name, street, city) VALUES ('John Doe', '123 Elm St', 'New York');
INSERT INTO Employees (person_name, street, city) VALUES ('Jane Smith', '456 Oak St', 'Los Angeles');

-- Insert data into Works Table
INSERT INTO Works (person_name, company_name, salary) VALUES ('John Doe', 'TechCorp', 75000);
INSERT INTO Works (person_name, company_name, salary) VALUES ('Jane Smith', 'HealthInc', 80000);

-- Insert data into Companies Table
INSERT INTO Companies (company_name, city) VALUES ('TechCorp', 'New York');
INSERT INTO Companies (company_name, city) VALUES ('HealthInc', 'Los Angeles');

-- Insert data into Branches Table
INSERT INTO Branches (branch_name, branch_city, assets) VALUES ('MainBranch', 'New York', 1000000);
INSERT INTO Branches (branch_name, branch_city, assets) VALUES ('WestBranch', 'Los Angeles', 800000);

-- Insert data into Customers Table
INSERT INTO Customers (customer_name, customer_street, customer_city) VALUES ('Alice Brown', '789 Pine St', 'Chicago');
INSERT INTO Customers (customer_name, customer_street, customer_city) VALUES ('Bob White', '321 Maple St', 'Houston');

-- Insert data into Loans Table
INSERT INTO Loans (loan_number, branch_name, amount) VALUES (101, 'MainBranch', 50000);
INSERT INTO Loans (loan_number, branch_name, amount) VALUES (102, 'WestBranch', 30000);

-- Insert data into Borrowers Table
INSERT INTO Borrowers (customer_name, loan_number) VALUES ('Alice Brown', 101);
INSERT INTO Borrowers (customer_name, loan_number) VALUES ('Bob White', 102);

-- Insert data into Accounts Table
INSERT INTO Accounts (account_number, branch_name, balance) VALUES (1001, 'MainBranch', 1000);
INSERT INTO Accounts (account_number, branch_name, balance) VALUES (1002, 'WestBranch', 1500);

-- Insert data into Depositors Table
INSERT INTO Depositors (customer_name, account_number) VALUES ('Alice Brown', 1001);
INSERT INTO Depositors (customer_name, account_number) VALUES ('Bob White', 1002);
```

### Step 3: Create View

```sql
-- Create a view that shows customer name and customer street
CREATE VIEW Customer_View AS
SELECT customer_name, customer_street
FROM Customers;

-- Query the view to display the results
SELECT * FROM Customer_View;
```

### Step 4: Create Index for Loan Number

```sql
-- Create an index for the loan_number in the Loans table to improve query performance
CREATE INDEX loan_number_idx ON Loans(loan_number);
```

### Step 5: Create Sequence for Account Number and Insert Records Using Sequence

```sql
-- Create a sequence for generating unique account numbers
CREATE SEQUENCE account_seq
START WITH 1003
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- Insert 4 records into Accounts table using the sequence
INSERT INTO Accounts (account_number, branch_name, balance)
VALUES (account_seq.NEXTVAL, 'MainBranch', 2000);

INSERT INTO Accounts (account_number, branch_name, balance)
VALUES (account_seq.NEXTVAL, 'WestBranch', 2500);

INSERT INTO Accounts (account_number, branch_name, balance)
VALUES (account_seq.NEXTVAL, 'MainBranch', 3000);

INSERT INTO Accounts (account_number, branch_name, balance)
VALUES (account_seq.NEXTVAL, 'WestBranch', 3500);

-- Verify the records inserted
SELECT * FROM Accounts;
```

### Step 6: Create Synonym for Depositors and Borrowers Table

```sql
-- Create synonyms for the Depositors and Borrowers tables
CREATE SYNONYM dep_synonym FOR Depositors;
CREATE SYNONYM bor_synonym FOR Borrowers;

-- Query to display records from Depositors using synonym
SELECT * FROM dep_synonym;

-- Query to display records from Borrowers using synonym
SELECT * FROM bor_synonym;
```

### Step 7: Update Record Using Synonym

```sql
-- Update a record in the Depositors table using the synonym
UPDATE dep_synonym
SET account_number = 1003
WHERE customer_name = 'Alice Brown';

-- Verify the update
SELECT * FROM Depositors;
```

### Step 8: Drop Synonym for Depositors Table

```sql
-- Drop the synonym for Depositors
DROP SYNONYM dep_synonym;
```

---

